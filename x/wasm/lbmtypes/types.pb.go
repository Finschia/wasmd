// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lbm/wasm/v1/types.proto

package lbmtypes

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/line/wasmd/x/wasm/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of wasm parameters.
type Params struct {
	CodeUploadAccess             types.AccessConfig `protobuf:"bytes,1,opt,name=code_upload_access,json=codeUploadAccess,proto3" json:"code_upload_access" yaml:"code_upload_access"`
	InstantiateDefaultPermission types.AccessType   `protobuf:"varint,2,opt,name=instantiate_default_permission,json=instantiateDefaultPermission,proto3,enum=cosmwasm.wasm.v1.AccessType" json:"instantiate_default_permission,omitempty" yaml:"instantiate_default_permission"`
	GasMultiplier                uint64             `protobuf:"varint,3,opt,name=gas_multiplier,json=gasMultiplier,proto3" json:"gas_multiplier,omitempty" yaml:"gas_multiplier"`
	InstanceCost                 uint64             `protobuf:"varint,4,opt,name=instance_cost,json=instanceCost,proto3" json:"instance_cost,omitempty" yaml:"instance_cost"`
	CompileCost                  uint64             `protobuf:"varint,5,opt,name=compile_cost,json=compileCost,proto3" json:"compile_cost,omitempty" yaml:"compile_cost"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7988258faf20f7, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "lbm.wasm.v1.Params")
}

func init() { proto.RegisterFile("lbm/wasm/v1/types.proto", fileDescriptor_5a7988258faf20f7) }

var fileDescriptor_5a7988258faf20f7 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x33, 0x6e, 0xdd, 0x43, 0xba, 0xbb, 0x48, 0x5c, 0xd9, 0xec, 0x52, 0x26, 0x35, 0xb0,
	0x50, 0x2f, 0x09, 0xbb, 0xde, 0x0a, 0x82, 0xa6, 0x82, 0x27, 0xa1, 0x04, 0xbd, 0x78, 0x09, 0x93,
	0xc9, 0x34, 0x0e, 0xcc, 0x64, 0x42, 0x66, 0x52, 0xed, 0x87, 0x10, 0x3c, 0x7a, 0xf4, 0xe8, 0x47,
	0xe9, 0xc1, 0x43, 0x8f, 0x9e, 0x82, 0xa6, 0xdf, 0x20, 0x9f, 0x40, 0x32, 0x69, 0x6a, 0xc5, 0x3f,
	0xb7, 0xbc, 0xef, 0xef, 0x7d, 0x9e, 0x27, 0x0c, 0x8f, 0x79, 0xc1, 0x62, 0xee, 0xbf, 0x43, 0x92,
	0xfb, 0xcb, 0x1b, 0x5f, 0xad, 0x72, 0x22, 0xbd, 0xbc, 0x10, 0x4a, 0x58, 0x43, 0x16, 0x73, 0xaf,
	0x05, 0xde, 0xf2, 0xe6, 0xea, 0x3c, 0x15, 0xa9, 0xd0, 0x7b, 0xbf, 0xfd, 0xea, 0x4e, 0xae, 0x46,
	0x58, 0x48, 0xae, 0xb5, 0x7f, 0x31, 0x70, 0xbf, 0x1e, 0x99, 0xc7, 0x73, 0x54, 0x20, 0x2e, 0x2d,
	0x61, 0x5a, 0x58, 0x24, 0x24, 0x2a, 0x73, 0x26, 0x50, 0x12, 0x21, 0x8c, 0x89, 0x94, 0x36, 0x18,
	0x83, 0xc9, 0xf0, 0x16, 0x7a, 0xbd, 0x4b, 0x9f, 0xe6, 0x3d, 0xd3, 0x7c, 0x26, 0xb2, 0x05, 0x4d,
	0x83, 0x87, 0xeb, 0xca, 0x31, 0x9a, 0xca, 0xb9, 0x5c, 0x21, 0xce, 0xa6, 0xee, 0x9f, 0x3e, 0x6e,
	0x78, 0xaf, 0x5d, 0xbe, 0xd6, 0xbb, 0x4e, 0x6a, 0x7d, 0x00, 0x26, 0xa4, 0x99, 0x54, 0x28, 0x53,
	0x14, 0x29, 0x12, 0x25, 0x64, 0x81, 0x4a, 0xa6, 0xa2, 0x9c, 0x14, 0x9c, 0x4a, 0x49, 0x45, 0x66,
	0xdf, 0x19, 0x83, 0xc9, 0xd9, 0xed, 0xe8, 0x5f, 0xe9, 0xaf, 0x56, 0x39, 0x09, 0x1e, 0x35, 0x95,
	0x73, 0xdd, 0xe5, 0xfe, 0xdf, 0xcd, 0x0d, 0x47, 0x07, 0x07, 0xcf, 0x3b, 0x3e, 0xdf, 0x63, 0xeb,
	0xa9, 0x79, 0x96, 0x22, 0x19, 0xf1, 0x92, 0x29, 0x9a, 0x33, 0x4a, 0x0a, 0xfb, 0x68, 0x0c, 0x26,
	0x83, 0xe0, 0xb2, 0xa9, 0x9c, 0x07, 0x5d, 0xc0, 0xef, 0xdc, 0x0d, 0x4f, 0x53, 0x24, 0x5f, 0xee,
	0x67, 0xeb, 0x89, 0x79, 0xda, 0x25, 0x60, 0x12, 0x61, 0x21, 0x95, 0x3d, 0xd0, 0x06, 0x76, 0x53,
	0x39, 0xe7, 0x87, 0x7f, 0xb8, 0xc3, 0x6e, 0x78, 0xd2, 0xcf, 0x33, 0x21, 0x95, 0x35, 0x35, 0x4f,
	0xb0, 0xe0, 0x39, 0x65, 0x3b, 0xf5, 0x5d, 0xad, 0xbe, 0x68, 0x2a, 0xe7, 0x7e, 0xff, 0xae, 0xbf,
	0xa8, 0x1b, 0x0e, 0x77, 0x63, 0xab, 0x9d, 0x0e, 0x3e, 0x7d, 0x76, 0x8c, 0xe0, 0xc5, 0xfa, 0x07,
	0x34, 0xbe, 0xd4, 0x10, 0xac, 0x6b, 0x08, 0x36, 0x35, 0x04, 0xdf, 0x6b, 0x08, 0x3e, 0x6e, 0xa1,
	0xb1, 0xd9, 0x42, 0xe3, 0xdb, 0x16, 0x1a, 0x6f, 0xae, 0x53, 0xaa, 0xde, 0x96, 0xb1, 0x87, 0x05,
	0xf7, 0x19, 0xcd, 0x88, 0x6e, 0x45, 0xe2, 0xbf, 0xef, 0xda, 0xc1, 0x62, 0xae, 0xdb, 0x11, 0x1f,
	0xeb, 0x7a, 0x3c, 0xfe, 0x19, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x8d, 0x1b, 0x82, 0x7a, 0x02, 0x00,
	0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CodeUploadAccess.Equal(&that1.CodeUploadAccess) {
		return false
	}
	if this.InstantiateDefaultPermission != that1.InstantiateDefaultPermission {
		return false
	}
	if this.GasMultiplier != that1.GasMultiplier {
		return false
	}
	if this.InstanceCost != that1.InstanceCost {
		return false
	}
	if this.CompileCost != that1.CompileCost {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompileCost != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CompileCost))
		i--
		dAtA[i] = 0x28
	}
	if m.InstanceCost != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.InstanceCost))
		i--
		dAtA[i] = 0x20
	}
	if m.GasMultiplier != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GasMultiplier))
		i--
		dAtA[i] = 0x18
	}
	if m.InstantiateDefaultPermission != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.InstantiateDefaultPermission))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.CodeUploadAccess.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CodeUploadAccess.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.InstantiateDefaultPermission != 0 {
		n += 1 + sovTypes(uint64(m.InstantiateDefaultPermission))
	}
	if m.GasMultiplier != 0 {
		n += 1 + sovTypes(uint64(m.GasMultiplier))
	}
	if m.InstanceCost != 0 {
		n += 1 + sovTypes(uint64(m.InstanceCost))
	}
	if m.CompileCost != 0 {
		n += 1 + sovTypes(uint64(m.CompileCost))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeUploadAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CodeUploadAccess.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantiateDefaultPermission", wireType)
			}
			m.InstantiateDefaultPermission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstantiateDefaultPermission |= types.AccessType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasMultiplier", wireType)
			}
			m.GasMultiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasMultiplier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceCost", wireType)
			}
			m.InstanceCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstanceCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompileCost", wireType)
			}
			m.CompileCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompileCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
